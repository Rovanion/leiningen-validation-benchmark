(defproject structural-caching "0.1.1"
  :description "Caching for arbitary cljs data utilising structual caching"
  :url "https://github.com/Day8/cljs-structural-caching.git"
  :license      {:name "MIT"}
  :scm {:name "git"
         :url "https://github.com/Day8/cljs-structural-caching"}
  
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [org.clojure/clojurescript "0.0-2755"]]
  
  :node-dependencies [[source-map-support "0.2.8"]]
  
  :plugins [[lein-cljsbuild "1.0.4"]
            [lein-npm "0.4.0"]
            [com.cemerick/clojurescript.test "0.3.3"]]
  
  :source-paths ["src"]
  
  :test-paths ["test"]
  
  :clean-targets ["out" "out-adv"]
  
  :cljsbuild {
              :builds [{:id "dev"
                        :source-paths ["src"]
                        :compiler {
                                   :main structural-caching.core
                                   :output-to "out/structural_caching.js"
                                   :output-dir "out"
                                   :optimizations :none
                                   :cache-analysis true
                                   :source-map true}}
                       {:id "test-dev"
                        :source-paths ["src" "test/structural_caching/test"] 
                        :compiler {
                                   :output-to "out/structural_caching.test-dev.js"
                                   :output-dir "out/out-dev-test"
                                   :optimizations :none
                                   :source-map true}}
                       {:id "test"
                        :source-paths ["src" "test/structural_caching/test"] 
                        :compiler {
                                   :output-to "out/structural_caching.test.js"
                                   :output-dir "out/out-test"
                                   :optimizations :simple}}
                       {:id "release"
                        :source-paths ["src"]
                        :compiler {
                                   :main structural-caching.core
                                   :output-to "out-adv/structural_caching.min.js"
                                   :output-dir "out-adv"
                                   :optimizations :advanced
                                   :pretty-print false}}]
              :test-commands {"unit-tests" 
                              ["phantomjs" :runner "out/structural_caching.test.js"]}}
  
  :aliases {"test" ["do" "clean," "cljsbuild" "test" "unit-tests"]})
