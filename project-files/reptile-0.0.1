(defproject reptile "0.0.1"
  :description "Reptile does workflow and project context management"
  :url "http://github.com/longstorm/reptile"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :plugins [[lein-cljsbuild "1.0.5"]
            [lein-npm "0.5.0"]
            [com.cemerick/clojurescript.test "0.3.3"]]
  :aliases {"cleantest" ["do" "clean," "cljsbuild" "once," "test,"]
            "autotest" ["do" "clean," "cljsbuild" "auto" "test"]}
  :source-paths ["src/lib" "src/node" "src/plugins"]
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [org.clojure/clojurescript "0.0-3196"]
                 [org.clojure/core.async "0.1.346.0-17112a-alpha"]
                 [longstorm/claude "0.1.10"]
                 [longstorm/org-backend "0.1.9"]
                 [i9n "0.2.14"]
                 [flow "0.1.7"]]
  :node-dependencies [[source-map-support "0.2.10"]
                      [blessed "0.0.29"]
                      [blessed-contrib "0.0.8"]
                      [mkdirp "0.3.5"]
                      [parse-diff "0.0.12"]
                      [jsdom "0.11.1"]
                      [MD5 "1.2.0"]]
  :cljsbuild {:builds [{:id "cli-node"
                        :source-paths ["src/lib" "src/node" "src/plugins"]
                        :compiler {:target :nodejs
                                   :output-to "target/reptile.js"
                                   :optimizations :simple
                                   :cache-analysis true}}
                       {:id "test"
                        :source-paths ["src/lib" "test/lib"]
                        :compiler {:output-to "target/reptile_test.js"
                                   :optimizations :simple}}]
              :test-commands {"unit-tests" ["node" :node-runner
                                            "target/reptile_test.js"]}}
  :profiles {:dev {:dependencies [[com.cemerick/double-check "0.6.1"]
                                  [com.cemerick/piggieback "0.2.0"]
                                  [org.clojure/tools.nrepl "0.2.10"]]
                   :repl-options {:nrepl-middleware
                                  [cemerick.piggieback/wrap-cljs-repl]}}})
